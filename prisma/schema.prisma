// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id Int @id @default(autoincrement())
  first_name String?
  last_name String?
  email String @unique
  password String
  bio String?
  location String?
  contact_info String?
  user_skills user_skills[]
  searching_skills searching_skills[]
  links_from links[] @relation("Requester")
  links_to links[] @relation("Receiver")
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model user_skills {
  id Int @id @default(autoincrement())
  user_id Int
  user users @relation(fields: [user_id], references: [id])
  skill_id Int
  skill skills @relation(fields: [skill_id], references: [id])
  proficiency Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model searching_skills {
  id Int @id @default(autoincrement())
  user_id Int
  user users @relation(fields: [user_id], references: [id])
  skill_id Int
  skill skills @relation(fields: [skill_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model skills {
  id Int @id @default(autoincrement())
  name String
  users user_skills[]
  searchers searching_skills[]
  categories category_skills[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model categories {
  id Int @id @default(autoincrement())
  name String
  skills category_skills[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model category_skills {
  id Int @id @default(autoincrement())
  skill_id Int
  skill skills @relation(fields: [skill_id], references: [id])
  category_id Int
  category categories @relation(fields: [category_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model links {
  id Int @id @default(autoincrement())
  requester_id Int
  requester users @relation("Requester", fields: [requester_id], references: [id])
  receiver_id Int
  receiver users @relation("Receiver", fields: [receiver_id], references: [id])
  status links_status
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum links_status {
  PENDING
  ACCEPTED
  DECLINED
}