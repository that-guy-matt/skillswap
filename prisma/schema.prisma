// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model app_user {
  id Int @id @default(autoincrement())
  first_name String?
  last_name String?
  email String @unique
  password String
  bio String?
  location String?
  contact_info String?
  user_skills user_skill[]
  searching_skills searching_skill[]
  connections_from connection[] @relation("Requester")
  connections_to connection[] @relation("Receiver")
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model user_skill {
  id Int @id @default(autoincrement())
  user_id Int
  user app_user @relation(fields: [user_id], references: [id])
  skill_id Int
  skill skill @relation(fields: [skill_id], references: [id])
  proficiency Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model searching_skill {
  id Int @id @default(autoincrement())
  user_id Int
  user app_user @relation(fields: [user_id], references: [id])
  skill_id Int
  skill skill @relation(fields: [skill_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model skill {
  id Int @id @default(autoincrement())
  name String
  users user_skill[]
  searchers searching_skill[]
  categories category_skill[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model category {
  id Int @id @default(autoincrement())
  name String
  skills category_skill[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model category_skill {
  id Int @id @default(autoincrement())
  skill_id Int
  skill skill @relation(fields: [skill_id], references: [id])
  category_id Int
  category category @relation(fields: [category_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model connection {
  id Int @id @default(autoincrement())
  requester_id Int
  requester app_user @relation("Requester", fields: [requester_id], references: [id])
  receiver_id Int
  receiver app_user @relation("Receiver", fields: [receiver_id], references: [id])
  status connection_status
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum connection_status {
  PENDING
  ACCEPTED
  DECLINED
}