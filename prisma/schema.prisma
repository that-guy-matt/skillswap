// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  email String @unique
  password String
  bio String?
  location String?
  contactInfo String?
  userSkills UserSkill[]
  searchingSkills SearchingSkill[]
  connectionsFrom Connection[] @relation("Requester")
  connectionsTo Connection[] @relation("Receiver")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSkill {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  skillId Int
  skill Skill @relation(fields: [skillId], references: [id])
  proficiency Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model SearchingSkill {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  skillId Int
  skill Skill @relation(fields: [skillId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Skill {
  id Int @id @default(autoincrement())
  name String
  users UserSkill[]
  searchers SearchingSkill[]
  categories CategoriesOnSkills[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id Int @id @default(autoincrement())
  name String
  skills CategoriesOnSkills[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CategoriesOnSkills {
  id Int @id @default(autoincrement())
  skillId Int
  skill Skill @relation(fields: [skillId], references: [id])
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Connection {
  id Int @id @default(autoincrement())
  requesterId Int
  requester User @relation("Requester", fields: [requesterId], references: [id])
  receiverId Int
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
  Status ConnectionStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
}